{"version":3,"sources":["App.js","index.js"],"names":["Square","props","className","winner","onClick","onSquareClicked","value","Board","status","xIsNext","square","onPlay","findCoordinates","calculateWinner","BoardRow","num1","num2","num3","map","el","winSquares","includes","index","nextSq","slice","handleClick","player","boardStructure","counter","push","lines","i","length","a","b","c","Game","useState","setXIsNext","Array","fill","history","setHistory","currentMove","setCurrentMove","toggleMoves","setToggleMoves","squareCordinates","setSquareCordinates","currentSquares","moves","_","move","totalMoves","description","nextMove","style","marginLeft","nextHistory","nextCordinate","reverse","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.105f90a2.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction Square(props) {\n  return (\n    <button\n      className={`${props.winner ? \"highlight-square\" : \"\"} square`}\n      onClick={props.onSquareClicked}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, square, onPlay, findCoordinates }) {\n  const winner = calculateWinner(square);\n  let status;\n\n  if (winner) {\n    status = \"Winner: \" + (winner && winner.player);\n  } else {\n    status = \"Next move: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  // Added extra functionality of \"where you are at\" as a part of challenge 1\n  function BoardRow({ num1, num2, num3 }) {\n    return (\n      <div className=\"board-row\">\n        {[num1, num2, num3].map((el) => (\n          <Square\n            winner={\n              winner && winner.winSquares && winner.winSquares.includes(el)\n            }\n            key={el}\n            value={square[el]}\n            onSquareClicked={() => handleClick(el)}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  const boardStructure = [];\n  for (let counter = 0; counter < 9; counter += 3) {\n    boardStructure.push(\n      <BoardRow\n        key={counter}\n        num1={counter}\n        num2={counter + 1}\n        num3={counter + 2}\n      />\n    );\n  }\n\n  function handleClick(index) {\n    if (square[index] || calculateWinner(square)) {\n      return;\n    }\n\n    const nextSq = square.slice();\n    if (xIsNext) {\n      nextSq[index] = \"X\";\n    } else {\n      nextSq[index] = \"O\";\n    }\n    findCoordinates(index);\n    onPlay(nextSq);\n  }\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {/* WAY 3 */}\n      {boardStructure}\n      {/* \n      WAY 2\n      <BoardRow num1={0} num2={1} num3={2} />\n      <BoardRow num1={3} num2={4} num3={5} />\n      <BoardRow num1={6} num2={7} num3={8} /> */}\n    </>\n  );\n\n  // Shortening the board WAY 1\n  // <div className=\"board-row\">\n  //   <Square value={square[3]} onSquareClicked={() => handleClick(3)} />\n  //   <Square value={square[4]} onSquareClicked={() => handleClick(4)} />\n  //   <Square value={square[5]} onSquareClicked={() => handleClick(5)} />\n  // </div>\n  // <div className=\"board-row\">\n  //   <Square value={square[6]} onSquareClicked={() => handleClick(6)} />\n  //   <Square value={square[7]} onSquareClicked={() => handleClick(7)} />\n  //   <Square value={square[8]} onSquareClicked={() => handleClick(8)} />\n  // </div>\n}\n\nfunction calculateWinner(square) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    let [a, b, c] = lines[i];\n    if (square[a] && square[a] === square[b] && square[a] === square[c]) {\n      return { player: square[a], winSquares: lines[i] };\n    }\n  }\n  return;\n}\n\nexport default function Game() {\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [toggleMoves, setToggleMoves] = useState(true);\n  const [squareCordinates, setSquareCordinates] = useState([[\"\", \"\"]]);\n\n  const currentSquares = history[currentMove];\n  // let squareCoordinate;\n\n  function handlePlay(nextSq) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSq];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    // setHistory([...history, nextSq]);\n    setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n\n    // const tempHistory = history.slice();\n    // tempHistory.length = nextMove + 1;\n    // setHistory(tempHistory);\n  }\n\n  function findCoordinates(index) {\n    const coordinates = [\n      [1, 1],\n      [2, 1],\n      [3, 1],\n      [1, 2],\n      [2, 2],\n      [3, 2],\n      [1, 3],\n      [2, 3],\n      [3, 3],\n    ];\n    const nextCordinate = squareCordinates.slice();\n    nextCordinate.push(coordinates[index]);\n    setSquareCordinates(nextCordinate);\n  }\n\n  // Added extra functionality of \"where you are at\" as a part of challenge 1\n  const moves = history.map((_, move, totalMoves) => {\n    let description;\n    if (move > 0) {\n      if (move !== totalMoves.length - 1) {\n        description = \"Go to move #\" + move;\n      } else {\n        description = \"You are at move #\" + move;\n      }\n    } else {\n      description = \"Go to Start\";\n    }\n\n    if (totalMoves.length === 1) {\n      description = \"You are at the Start\";\n    }\n\n    return move !== totalMoves.length - 1 ? (\n      <tr key={move}>\n        <td>\n          <button onClick={() => jumpTo(move)}>{description}</button>\n        </td>\n        {move !== 0 && (\n          <td>\n            <span style={{ marginLeft: \"25px\" }}>\n              Column and Row{\" \"}\n              {`(${squareCordinates[move][0]}, ${squareCordinates[move][1]})`}\n            </span>\n          </td>\n        )}\n      </tr>\n    ) : (\n      <tr key={move}>\n        <td>{description}</td>\n        {move !== 0 && (\n          <td>\n            <span style={{ marginLeft: \"25px\" }}>\n              Column and Row{\" \"}\n              {`(${squareCordinates[move][0]}, ${squareCordinates[move][1]})`}\n            </span>\n          </td>\n        )}\n      </tr>\n    );\n  });\n\n  //Challenge 3 - Toggle functionality\n  function toggleSortForMoves() {\n    setToggleMoves(!toggleMoves);\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          xIsNext={xIsNext}\n          square={currentSquares}\n          onPlay={handlePlay}\n          findCoordinates={findCoordinates}\n        />\n      </div>\n      <div className=\"game-info\">{toggleMoves ? moves : moves.reverse()}</div>\n      <div className=\"game-info\"></div>\n      <div className=\"game-info\">\n        <button onClick={toggleSortForMoves}>\n          {toggleMoves ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"],"sourceRoot":""}